{"version":3,"sources":["components/FormularioGifs.js","helpers/getGifsApi.js","components/CardGifs.js","assets/loading.gif","components/LitadoGifs.js","hooks/useFetchGifs.js","App.js","reportWebVitals.js","index.js"],"names":["FormularioGifs","setListaGifs","useState","inputValue","setInputValue","className","onSubmit","e","preventDefault","cat","type","placeholder","autoFocus","autoComplete","value","onChange","target","getGifsApi","category","a","url","encodeURI","fetch","res","json","dataGifs","data","datoGifs","map","gif","id","title","images","downsized_medium","CardGifs","src","alt","LitadoGifs","state","loading","setState","useEffect","then","img","console","log","useFetchGifs","gifs","cargando","App","listaGifs","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0LAIaA,EAAiB,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aAAmB,EACZC,mBAAS,IADG,mBACzCC,EADyC,KAC7BC,EAD6B,KAoBhD,OACI,uBAAMC,UAAU,aAAaC,SAXZ,SAACC,GAClBA,EAAEC,iBAGFP,GAAa,SAACQ,GAAD,OAAUN,GAAV,mBAAwBM,OAGrCL,EAAc,KAId,UACI,4DACA,uBACA,uBAEIM,KAAK,OACLC,YAAY,oBACZC,WAAS,EACTC,aAAa,MACbC,MAAOX,EACPY,SA3Bc,SAACR,GAEvBH,EAAcG,EAAES,OAAOF,c,+BCTlBG,EAAU,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAIfC,EAJe,iDAIiCC,UAAUH,GAJ3C,+DAMJI,MAAMF,GANF,cAMhBG,EANgB,gBAODA,EAAIC,OAPH,cAOlBC,EAPkB,OAQhBC,EAASD,EAATC,KAEAC,EAAWD,EAAKE,KAAI,SAACC,GACvB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXX,IAAKS,EAAIG,OAAOC,iBAAiBb,QAdnB,kBAkBfO,GAlBe,4CAAH,sDCCVO,EAAW,SAAC,GAAiB,IAAhBH,EAAe,EAAfA,MAAMX,EAAS,EAATA,IAE5B,OACI,sBAAKf,UAAU,gDAAf,UACI,qBAAK8B,IAAKf,EAAKgB,IAAKL,IACpB,6BAAKA,QCPF,MAA0B,oCCM5BM,EAAa,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAGnBoB,ECLkB,SAACpB,GAAc,IAAD,EACZhB,mBAAS,CAC/BwB,KAAK,GACLa,SAAS,IAHyB,mBAC/BD,EAD+B,KACxBE,EADwB,KAkBtC,OAZAC,qBAAU,WACNxB,EAAWC,GACNwB,MAAK,SAACC,GACHC,QAAQC,IAAIF,GACZH,EAAS,CACLd,KAAKiB,EACLJ,SAAQ,SAIpB,CAACrB,IAEEoB,EDbOQ,CAAa5B,GAEf6B,EAAiBT,EAAtBZ,KAAWa,EAAWD,EAAXC,QAGlB,OACI,sBAAKlC,UAAU,yBAAf,UACI,6BAAKa,IAEDqB,GAAW,mBAAGlC,UAAU,UAAb,SAAuB,qBAAK8B,IAAKa,EAAUZ,IAAI,cAG9D,qBAAK/B,UAAU,qBAAf,SAEQ0C,EAAKnB,KAAI,SAACC,GAAD,OACL,cAAC,EAAD,eAA2BA,GAAZA,EAAIC,aEG5BmB,MAvBf,WACI,IADW,EAGuB/C,mBAFd,CAAC,cADV,mBAGJgD,EAHI,KAGOjD,EAHP,KAKX,OACI,qBAAKI,UAAU,kBAAf,SACI,sBAAKA,UAAU,gBAAf,UACI,cAAC,EAAD,CAAgBJ,aAAcA,IAE9B,+BACI,oBAAII,UAAU,wCAAd,+BAEI6C,EAAUtB,KAAI,SAACV,GAAD,OACV,cAAC,EAAD,CAA2BA,SAAUA,GAApBA,eCN9BiC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBX,MAAK,YAAkD,IAA/CY,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.c93093ad.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nimport PropTypes from \"prop-types\";\n\nexport const FormularioGifs = ({ setListaGifs }) => {\n    const [inputValue, setInputValue] = useState(\"\");\n\n    /* ======= Evento de input =======*/\n    const handleInputChange = (e) => {\n        // [e.target.name] = e.target.value;\n        setInputValue(e.target.value);\n    };\n\n    /* ======= Cuando se Envia el formulario para la busqueda =======*/\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        /* === Agregando a nuestro array principal === */\n        setListaGifs((cat) => [inputValue,...cat]);\n\n        /* === limpiando nuestro input === */\n        setInputValue(\"\");\n    };\n\n    return (\n        <form className=\"form__gifs\" onSubmit={handleSubmit}>\n            <h2>Encuentra tus GiFs Animado</h2>\n            <hr />\n            <input\n                //name=\"nombregif\"\n                type=\"text\"\n                placeholder=\"Ej. Goku, pokemon\"\n                autoFocus\n                autoComplete=\"off\"\n                value={inputValue}\n                onChange={handleInputChange}\n            />\n\n            {/* <button type=\"submit\">Buscar...</button> */}\n        </form>\n    );\n};\n\nFormularioGifs.propTypes = {\n    setListaGifs: PropTypes.func.isRequired,\n};\n","\nexport const getGifsApi = async (category) => {\n    // const url =\n    //  `https://api.giphy.com/v1/gifs/search?api_key=qqeTstWplCGA5CU1kApsPmszYO2ZU7Ij&q=${encodeURI(categoriaGif)}&limit=10`;\n\n     const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=qqeTstWplCGA5CU1kApsPmszYO2ZU7Ij`;\n\n    const res = await fetch(url),\n        dataGifs = await res.json(),\n        { data } = dataGifs;\n\n    const datoGifs = data.map((gif) => {\n        return {\n            id: gif.id,\n            title: gif.title,\n            url: gif.images.downsized_medium.url,\n        };\n    });\n\n    return datoGifs;\n};\n","import React from \"react\";\n\nexport const CardGifs = ({title,url}) => {\n    \n    return (\n        <div className=\"carfGif animate__animated animate__backInLeft\">\n            <img src={url} alt={title} />\n            <h3>{title}</h3>\n        </div>\n    );\n};\n","export default __webpack_public_path__ + \"static/media/loading.a1a99674.gif\";","import React from \"react\";\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\nimport { CardGifs } from \"./CardGifs\";\n\nimport cargando from '../assets/loading.gif'\n\nexport const LitadoGifs = ({ category }) => {\n\n\n    const state = useFetchGifs(category);\n    \n    const {data:gifs, loading} = state; \n    \n\n    return (\n        <div className=\"listadogifs__container\">\n            <h3>{category}</h3>\n            {\n                loading && <p className=\"loading\"><img src={cargando} alt=\"loading\"/></p>\n            }\n\n            <div className=\"listadogifs__cards\">\n                {\n                    gifs.map((gif) => (\n                        <CardGifs key={gif.id} {...gif}/>\n                    ))\n                }\n            </div>\n        </div>\n    );\n};\n/* qqeTstWplCGA5CU1kApsPmszYO2ZU7Ij */\n","import { useEffect, useState } from \"react\"\nimport { getGifsApi } from \"../helpers/getGifsApi\";\n\n\nexport const useFetchGifs = (category) => {\n    const [state, setState] = useState({\n        data:[],\n        loading: true\n    })\n\n    useEffect(() => {\n        getGifsApi(category)\n            .then((img)=>{\n                console.log(img)\n                setState({\n                    data:img,\n                    loading:false\n                })\n            })\n\n     }, [category]);\n\n    return state\n}\n","import React, { useState } from \"react\";\nimport { FormularioGifs } from \"./components/FormularioGifs\";\nimport { LitadoGifs } from \"./components/LitadoGifs\";\n\nfunction App() {\n    const initialGifs = ['One Punch'];\n\n    const [listaGifs, setListaGifs] = useState(initialGifs);\n\n    return (\n        <div className=\"gifs__container\">\n            <div className=\"gifs__content\">\n                <FormularioGifs setListaGifs={setListaGifs} />\n\n                <ol>\n                    <h2 className=\"animate__animated animate__backInDown\">TUS GIFs ANIMADOS</h2>\n                    {\n                        listaGifs.map((category) =>(\n                            <LitadoGifs key={category} category={category} />\n                        ))\n                    }\n                </ol>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}